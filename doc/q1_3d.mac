/* -*- mode: maxima -*- */

/* pretty-printing */
texput(dx, "\\Delta x")$
texput(dy, "\\Delta y")$

/* coordinates of the nodes of the reference element */
xx : [-1,  1,  1, -1, -1,  1, 1, -1]$
yy : [-1, -1,  1,  1, -1, -1, 1,  1]$
zz : [-1, -1, -1, -1,  1,  1, 1,  1]$

/* Reference element basis functions */
chi[i](xi, eta, zeta) := (1/8) * (1 + xi*xx[i]) * (1 + eta*yy[i]) * (1 + zeta*zz[i])$

/* Derivatives of the reference element basis functions */
reference_vars : [xi, eta, zeta]$
diff_chi[i,j] := lambda([xi,eta,zeta], diff(chi[i](xi,eta,zeta), reference_vars[j]))$

/* The isoparametric map from the reference to a physical element. */
x(xi,eta,zeta) := 'sum(x[j]*'chi[j](xi, eta, zeta), j, 1, 8)$
y(xi,eta,zeta) := 'sum(y[j]*'chi[j](xi, eta, zeta), j, 1, 8)$
z(xi,eta,zeta) := 'sum(z[j]*'chi[j](xi, eta, zeta), j, 1, 8)$

/* Jacobian of the map from the reference element */
physical_vars : [x, y, z]$
J[i,j] := 'diff(funmake(physical_vars[j], [xi, eta, zeta]), reference_vars[i])$
J_3 : genmatrix(J,3,3)$

equal_horizontal_spacing : [
  x[3] = x[2],
  x[4] = x[1],
  x[5] = x[1],
  x[6] = x[2],
  x[7] = x[2],
  x[8] = x[1],
  x[2] = x[1] + dx,
  y[2] = y[1],
  y[4] = y[3],
  y[5] = y[1],
  y[6] = y[1],
  y[7] = y[3],
  y[8] = y[3],
  y[3] = y[1] + dy
]$

equal_vertical_spacing : [
  z[2] = z[1],
  z[3] = z[1],
  z[4] = z[1],
  z[6] = z[5],
  z[7] = z[5],
  z[8] = z[5],
  z[5] = z[1] + dz
  ]$

/* 2x2x2 Gaussian quadrature */

/* points: */
pts : transpose(matrix(xx, yy, zz) / sqrt(3))$

/* pre-computed values of shape functions at quadrature points */
shortcuts : [1+1/sqrt(3)=2*H, 1-1/sqrt(3) = 2*L]$
Chi[i,j] := subst(shortcuts, apply(chi[i], pts[j]))$

/* pre-computed derivatives of element basis functions at quadrature points */
/* pt - quad point
   i - basis function
   var - partial derivative */
diff_Chi[pt,i,var] := subst(shortcuts, apply(diff_chi[i,var], pts[pt]))$

/* Jed's shortcuts */
P :  1/2$
M : -1/2$
H : (1/2) * (1 + 1/sqrt(3))$
L : (1/2) * (1 - 1/sqrt(3))$
rewrite(x) := subst([M='M, P='P, H='H, L='L], x)$

diff_Chi_xi[pt,i]   := rewrite(diff_Chi[pt,i,1])$
diff_Chi_eta[pt,i]  := rewrite(diff_Chi[pt,i,2])$
diff_Chi_zeta[pt,i] := rewrite(diff_Chi[pt,i,3])$

/* Here's how to invert this Jacobian */
A : matrix([a[1,1], 0, a[1,3]], [0, a[2,2], a[2,3]], [0, 0, a[3,3]])$
A_inv : invert(A)$
